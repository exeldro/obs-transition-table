name: build obs plugin

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  PLUGIN_NAME: transition-table
  OBS_VERSION: 28.0.0-rc1

jobs:
  macos:
    name: "macOS"
    runs-on: [macos-12]
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, arm64, universal]
    env:
      QT_VERSION: '6.3.1'
      MACOS_DEPS_VERSION: '2022-08-02'
      SPARKLE_VERSION: '1.26.0'
    defaults:
      run:
        shell: zsh {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
        with:
          repository: obsproject/obs-studio
          ref: ${{ env.OBS_VERSION }}
          submodules: 'recursive'
      - name: "Checkout plugin"
        uses: actions/checkout@v2.3.3
        with:
          path: UI/frontend-plugins/${{ env.PLUGIN_NAME }}
      - name: Fetch Git Tags
        run: |
          cd UI/frontend-plugins/${{ env.PLUGIN_NAME }}
          git fetch --prune --tags --unshallow
      - name: 'Install prerequisites (Homebrew)'
        shell: bash
        run: |
          if [ -d /usr/local/opt/openssl@1.0.2t ]; then
            brew uninstall openssl@1.0.2t
            brew untap local/openssl
          fi

          if [ -d /usr/local/opt/python@2.7.17 ]; then
            brew uninstall python@2.7.17
            brew untap local/python2
          fi

          if [ -d /usr/local/opt/speexdsp ]; then
            brew unlink speexdsp
          fi
          brew uninstall curl php composer
          brew bundle --file ./CI/include/Brewfile
          echo "NPROC=$(sysctl -n hw.ncpu)" >> $GITHUB_ENV
      - name: 'Install prerequisite: Pre-built dependencies'
        run: |
          mkdir /tmp/obsdeps
          curl -L -O https://github.com/obsproject/obs-deps/releases/download/${{ env.MACOS_DEPS_VERSION }}/macos-deps-${{ env.MACOS_DEPS_VERSION }}-${{ matrix.arch }}.tar.xz
          tar -xf ./macos-deps-${{ env.MACOS_DEPS_VERSION }}-${{ matrix.arch }}.tar.xz -C "/tmp/obsdeps"
      - name: 'Install prerequisite: Sparkle'
        run: |
          curl -L -O https://github.com/sparkle-project/Sparkle/releases/download/${{ env.SPARKLE_VERSION }}/Sparkle-${{ env.SPARKLE_VERSION }}.tar.xz
          tar -xf ./Sparkle-${{ env.SPARKLE_VERSION }}.tar.xz -C "/tmp/obsdeps/lib/"
      - name: 'Install prerequisite: Pre-built dependency Qt'
        run: |
          curl -L -O https://github.com/obsproject/obs-deps/releases/download/${{ env.MACOS_DEPS_VERSION }}/macos-deps-qt6-${{ env.MACOS_DEPS_VERSION }}-${{ matrix.arch }}.tar.xz
          tar -xf ./macos-deps-qt6-${{ env.MACOS_DEPS_VERSION }}-${{ matrix.arch }}.tar.xz -C "/tmp/obsdeps"
          xattr -r -d com.apple.quarantine /tmp/obsdeps
      - name: Configure
        if: ${{ matrix.arch == 'universal' }}
        run: |
          echo "add_subdirectory(${{ env.PLUGIN_NAME }})" >> UI/frontend-plugins/CMakeLists.txt
          mkdir ./build
          cmake -S . -B "./build" -G Xcode -DCMAKE_PREFIX_PATH:PATH="/tmp/obsdeps" -DCMAKE_FRAMEWORK_PATH="/tmp/obsdeps/Frameworks" -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -DCMAKE_BUILD_TYPE="RelWithDebInfo" -DCMAKE_INSTALL_PREFIX="install" -DDISABLE_PYTHON=ON -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DBUILD_BROWSER=OFF -DBUILD_VST=OFF -DENABLE_SCRIPTING=OFF -DENABLE_PLUGINS=FALSE -DDISABLE_PLUGINS=TRUE
      - name: Configure
        if: ${{ matrix.arch != 'universal' }}
        run: |
          echo "add_subdirectory(${{ env.PLUGIN_NAME }})" >> UI/frontend-plugins/CMakeLists.txt
          mkdir ./build
          cmake -S . -B "./build" -G Ninja -DCMAKE_PREFIX_PATH:PATH="/tmp/obsdeps" -DCMAKE_FRAMEWORK_PATH="/tmp/obsdeps/Frameworks" -DCMAKE_OSX_ARCHITECTURES="${{ matrix.arch }}" -DCMAKE_BUILD_TYPE="RelWithDebInfo" -DCMAKE_INSTALL_PREFIX="install" -DDISABLE_PYTHON=ON -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DBUILD_BROWSER=OFF -DBUILD_VST=OFF -DENABLE_SCRIPTING=OFF -DENABLE_PLUGINS=FALSE -DDISABLE_PLUGINS=TRUE
      - name: Build
        run: |
          set -e
          cmake --build "./build"
      - name: 'Install prerequisite: Packages app'
        if: success()
        run: |
          curl -L -O http://s.sudre.free.fr/Software/files/Packages.dmg
          sudo hdiutil attach ./Packages.dmg
          sudo installer -pkg /Volumes/Packages\ 1.2.10/Install\ Packages.pkg -target /
      - name: Package
        if: success()
        run: |
          FILE_DATE=$(date +%Y-%m-%d)
          FILE_NAME=${{ env.PLUGIN_NAME }}-$FILE_DATE-${{ github.sha }}-macos-${{ matrix.arch }}.pkg
          echo "FILE_NAME=${FILE_NAME}" >> $GITHUB_ENV
          packagesbuild "./build/installer-macos.generated.pkgproj"
          mv ${{ env.PLUGIN_NAME }}.pkg ${FILE_NAME}
      - name: Publish
        if: success()
        uses: actions/upload-artifact@v2.2.0
        with:
          name: '${{ env.FILE_NAME }}'
          path: ./*.pkg
  linux:
    name: 'Linux'
    runs-on: ${{ matrix.ubuntu }}
    strategy:
      fail-fast: false
      matrix:
        ubuntu: ['ubuntu-20.04', 'ubuntu-22.04']
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
        with:
          repository: obsproject/obs-studio
          ref: ${{ env.OBS_VERSION }}
          submodules: 'recursive'
      - name: "Checkout plugin"
        uses: actions/checkout@v2.3.3
        with:
          path: UI/frontend-plugins/${{ env.PLUGIN_NAME }}
      - name: Add plugin to obs cmake
        shell: bash
        run: echo "add_subdirectory(${{ env.PLUGIN_NAME }})" >> UI/frontend-plugins/CMakeLists.txt
      - name: Fetch Git Tags
        run: git fetch --prune --tags --unshallow
      - name: 'Install dependencies'
        run: CI/linux/01_install_dependencies.sh --disable-pipewire
      - name: 'Configure'
        shell: bash
        run: |
          mkdir ./build
          cmake -S . -B "./build" -G Ninja -DCMAKE_BUILD_TYPE="RelWithDebInfo" -DLINUX_PORTABLE=OFF -DENABLE_AJA=OFF -DENABLE_NEW_MPEGTS_OUTPUT=OFF -DBUILD_CAPTIONS=OFF -DWITH_RTMPS=OFF -DBUILD_BROWSER=OFF -DBUILD_VIRTUALCAM=OFF -DBUILD_VST=OFF -DENABLE_PIPEWIRE=OFF -DENABLE_SCRIPTING=OFF
      - name: 'Build'
        shell: bash
        run: |
          cmake --build "./build"
      - name: 'Package'
        shell: bash
        run: |
          FILE_DATE=$(date +%Y-%m-%d)
          FILE_NAME=${{ env.PLUGIN_NAME }}-$FILE_DATE-${{ github.sha }}-${{ matrix.ubuntu }}.tar.gz
          echo "FILE_NAME=${FILE_NAME}" >> $GITHUB_ENV
          mkdir -p ./${{ env.PLUGIN_NAME }}/bin/64bit/
          mv ./build/UI/frontend-plugins/${{ env.PLUGIN_NAME }}/${{ env.PLUGIN_NAME }}.so ./${{ env.PLUGIN_NAME }}/bin/64bit/${{ env.PLUGIN_NAME }}.so
          mv ./UI/frontend-plugins/${{ env.PLUGIN_NAME }}/data ./${{ env.PLUGIN_NAME }}/data
          tar -cvzf "${FILE_NAME}" ${{ env.PLUGIN_NAME }}
      - name: 'Publish'
        uses: actions/upload-artifact@v2.2.0
        with:
          name: '${{ env.FILE_NAME }}'
          path: '*.tar.gz'
  windows-build:
    name: 'Windows Build'
    runs-on: [windows-latest]
    strategy:
      fail-fast: true
      matrix:
        target: [x64, x86]
        include:
          - target: x64
            cmake_build: 'x64'
            deps_ext: '64'
          - target: x86
            cmake_build: 'Win32'
            deps_ext: '32'
    env:
      QT_VERSION: '6.3.1'
      CMAKE_GENERATOR: "Visual Studio 17 2022"
      CMAKE_SYSTEM_VERSION: "10.0.18363.657"
      WINDOWS_DEPS_VERSION: '2022-08-02'
    steps:
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Checkout obs
        uses: actions/checkout@v2.3.3
        with:
          repository: obsproject/obs-studio
          ref: ${{ env.OBS_VERSION }}
          submodules: 'recursive'
      - name: Checkout plugin
        uses: actions/checkout@v2.3.3
        with:
          path: UI/frontend-plugins/${{ env.PLUGIN_NAME}}
      - name: Add plugin to obs cmake
        shell: cmd
        run: echo add_subdirectory(${{ env.PLUGIN_NAME }}) >> UI/frontend-plugins/CMakeLists.txt
      - name: Fetch Git Tags
        run: git fetch --prune --tags --unshallow
      - name: 'Install prerequisite: QT'
        run: |
          curl -kLO https://github.com/obsproject/obs-deps/releases/download/${{ env.WINDOWS_DEPS_VERSION }}/windows-deps-qt6-${{ env.WINDOWS_DEPS_VERSION }}-${{ matrix.target }}.zip -f --retry 5 -C -
          7z x windows-deps-qt6-${{ env.WINDOWS_DEPS_VERSION }}-${{ matrix.target }}.zip -o"${{ github.workspace }}/cmbuild/deps"
      - name: 'Install prerequisite: Pre-built dependencies'
        run: |
          curl -kLO https://github.com/obsproject/obs-deps/releases/download/${{ env.WINDOWS_DEPS_VERSION }}/windows-deps-${{ env.WINDOWS_DEPS_VERSION }}-${{ matrix.target }}.zip -f --retry 5 -C -
          7z x windows-deps-${{ env.WINDOWS_DEPS_VERSION }}-${{ matrix.target }}.zip -o"${{ github.workspace }}/cmbuild/deps"
      - name: Configure
        run: |
          mkdir ./package
          mkdir ./installer
          mkdir ./installer/media
          mkdir ./build
          cmake -S . -B "${{ github.workspace }}/build" -G"${{ env.CMAKE_GENERATOR }}" -DCMAKE_PREFIX_PATH:PATH="${{ github.workspace }}/cmbuild/deps" -A"${{ matrix.cmake_build }}" -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" -DBUILD_BROWSER=false -DBUILD_VST=false -DBUILD_VIRTUALCAM=false -DBUILD_CAPTIONS=false -DCOMPILE_D3D12_HOOK=false -DENABLE_SCRIPTING=false -DDepsPath="${{ github.workspace }}/cmbuild/deps" -DDepsPath${{ matrix.deps_ext }}="${{ github.workspace }}/cmbuild/deps" -DQTDIR="${{ github.workspace }}/cmbuild/deps/qt6" -DCOPIED_DEPENDENCIES=FALSE -DCOPY_DEPENDENCIES=TRUE -DENABLE_PLUGINS=FALSE -DDISABLE_PLUGINS=TRUE
      - name: 'Build'
        run: msbuild /m /p:Configuration=RelWithDebInfo .\build\obs-studio.sln
      - name: Package
        if: success()
        run: |
          $env:FILE_NAME="${{ env.PLUGIN_NAME }}-${{ github.sha }}-windows-${{ matrix.target }}"
          echo "FILE_NAME=${env:FILE_NAME}" >> ${env:GITHUB_ENV}
          robocopy .\build\rundir\RelWithDebInfo\obs-plugins\${{ matrix.deps_ext }}bit\ .\package\obs-plugins\${{ matrix.deps_ext }}bit ${{ env.PLUGIN_NAME }}.* /E /XF .gitignore
          robocopy .\build\rundir\RelWithDebInfo\data\obs-plugins\${{ env.PLUGIN_NAME }}\ .\package\data\obs-plugins\${{ env.PLUGIN_NAME }}\ /E /XF .gitignore
          copy .\build\UI\frontend-plugins\${{ env.PLUGIN_NAME }}\installer.iss .\installer\installer.iss
          robocopy .\UI\frontend-plugins\${{ env.PLUGIN_NAME}}\media\ .\installer\media\ /E /XF .gitignore
          exit 0
      - name: Publish zip
        if: success()
        uses: actions/upload-artifact@v2.2.0
        with:
          name: '${{ env.FILE_NAME }}'
          path: package/*
      - name: Publish Installer Files
        if: success()
        uses: actions/upload-artifact@v2.2.0
        with:
          name: 'installer-files'
          path: installer/*
  windows-package:
    name: 'Windows Package'
    runs-on: [windows-latest]
    needs: [windows-build]
    steps:
      - name: Init
        if: success()
        run: |
          mkdir ./package
          $env:FILE_DATE=(Get-Date -UFormat "%F")
          $env:FILE_NAME="${{ env.PLUGIN_NAME }}-${env:FILE_DATE}-${{ github.sha }}-windows"
          echo "FILE_NAME=${env:FILE_NAME}" >> ${env:GITHUB_ENV}
          $env:FILE_NAME_X86="${{ env.PLUGIN_NAME }}-${{ github.sha }}-windows-x86"
          echo "FILE_NAME_X86=${env:FILE_NAME_X86}" >> ${env:GITHUB_ENV}
          $env:FILE_NAME_X64="${{ env.PLUGIN_NAME }}-${{ github.sha }}-windows-x64"
          echo "FILE_NAME_X64=${env:FILE_NAME_X64}" >> ${env:GITHUB_ENV}
      - name: Retrieve x86 build
        uses: actions/download-artifact@v2
        with:
          name: '${{ env.FILE_NAME_X86 }}'
          path: ./package
      - name: Retrieve x64 build
        uses: actions/download-artifact@v2
        with:
          name: '${{ env.FILE_NAME_X64 }}'
          path: ./package
      - name: Retrieve installer files
        uses: actions/download-artifact@v2
        with:
          name: 'installer-files'
          path: .
      - name: Create Code Signing Certificate
        if: success() && github.event_name != 'pull_request'
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate\certificate.txt -Value '${{ secrets.CERTIFICATE }}'
          certutil -decode certificate\certificate.txt certificate\certificate.pfx
      - name: Code Sign 32
        if: success() && github.event_name != 'pull_request'
        run: |
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.20348.0/x86/signtool.exe' sign /f certificate\certificate.pfx /p '${{ secrets.CERTIFICATE_PASS }}' /t http://timestamp.comodoca.com/authenticode .\package\obs-plugins\32bit\${{ env.PLUGIN_NAME }}.dll
      - name: Code Sign 64
        if: success() && github.event_name != 'pull_request'
        run: |
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.20348.0/x64/signtool.exe' sign /f certificate\certificate.pfx /p '${{ secrets.CERTIFICATE_PASS }}' /t http://timestamp.comodoca.com/authenticode .\package\obs-plugins\64bit\${{ env.PLUGIN_NAME }}.dll
      - name: Publish zip
        if: success()
        uses: actions/upload-artifact@v2.2.0
        with:
          name: '${{ env.FILE_NAME }}'
          path: package/*
      - name: "Package Installer (Prereqs)"
        run: |
          curl "-kL" "https://github.com/Xaymar/msvc-redist-helper/releases/download/0.1/msvc-redist-helper-64.exe" "-f" "--retry" "5" "-o" "msvc-redist-helper.exe"
          curl "-kL" "https://files.jrsoftware.org/is/6/innosetup-6.0.3.exe" "-f" "--retry" "5" "-o" "inno.exe"
          .\inno.exe /VERYSILENT /SP- /SUPPRESSMSGBOXES /NORESTART
      - name: "Package Installer (Compile)"
        run: |
          & 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe' /Qp ".\installer.iss"
      - name: Code Sign Installer
        if: success() && github.event_name != 'pull_request'
        run: |
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.20348.0/x64/signtool.exe' sign /f certificate\certificate.pfx /p '${{ secrets.CERTIFICATE_PASS }}' /t http://timestamp.comodoca.com/authenticode .\package\${{ env.PLUGIN_NAME }}-installer.exe
      - name: Publish installer
        if: success()
        uses: actions/upload-artifact@v2.2.0
        with:
          name: '${{ env.FILE_NAME }}-installer'
          path: package/*.exe
      - name: Remove temp artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: "${{ env.FILE_NAME_X86 }}\n${{ env.FILE_NAME_X64 }}\ninstaller-files"